[alias]
	co = checkout
	ci = commit -S
	st = status -s
	br = branch
	sui = submodule update --init
	hist = log --pretty=format:\"%h %ad | %s%d [%an]\" --graph --date=short
	lg = log --graph --abbrev-commit --decorate --format=format:'%C(bold blue)%h%C(reset) - %C(bold cyan)%aD%C(reset) %C(bold green)(%ar)%C(reset)%C(bold yellow)%d%C(reset)%n''    %C(white)%s%C(reset) %C(dim white)- %an%C(reset)'
	branch-name = rev-parse --abbrev-ref HEAD
	upstream-name = !git remote | egrep -o '(upstream|origin)' | tail -1
	head-branch = !git remote show $(git upstream-name) | awk '/HEAD branch/ {print $NF}'
	pub = !git push -u origin $(git branch-name)
	unstage = reset HEAD
	rollback = reset --soft HEAD^
	upstream-org = !git remote get-url $(git upstream-name) | cut -d: -f2 | cut -d/ -f1
	create-pr = "!f() { hub pull-request -b $(git upstream-org):$1; }; f"
	create-release = "!f() { hub sync && hub release create -e -m \"$(git since-last-tag)\" $1; }; f"
	delete-merged = !git co $(git head-branch) && git branch --merged | grep -v '\\*' | xargs -n 1 git branch -d
	mkpatch = "!f() { git diff $1..$(git branch-name) > diff.patch && echo diff.patch; }; f"
	tags = tag -l --sort=v:refname
	files = "!f() { git log --name-status --pretty='' ${1:-$(git head-branch)}..HEAD; }; f"
	last-tag = !git tags | tail -1
	since-last-tag = "!f() { if [ -z \"$(git last-tag)\" ]; then git log --oneline --all; else git log --oneline --no-decorate ${1:-$(git last-tag)}..$(git branch-name) | sort -rk 2,2; fi; }; f"
  unfuck-this-branch = "!f() { \
    start_commit=$1; \
    new_branch=$(shuf -n3 /usr/share/dict/words | tr '\n' '-' | tr '[:upper:]' '[:lower:]' | tr -cd '[:alnum:]-' | sed 's/-$//'); \
    old_branch=$(git symbolic-ref --short HEAD); \
    if [ -z \"$start_commit\" ]; then \
      echo \"You must specify the SHA of the first bad commit\"; \
      return 1; \
    fi; \
    if git rev-parse --verify $new_branch > /dev/null 2>&1; then \
      echo \"Branch '${new_branch}' already exists\"; \
      return 1; \
    fi; \
    git checkout -b $new_branch > /dev/null 2>&1; \
    git checkout $old_branch > /dev/null 2>&1; \
    git reset --hard $start_commit^; \
    echo \"New branch '${new_branch}' created\"; \
    git checkout $new_branch; \
  }; f"
[user]
	signingkey = BA210DB793D37A6157177FDDB9CEB1D5CFA7BE10
	name = Joey Espinosa
	email = jlouis.espinosa@gmail.com
[push]
	default = simple
[core]
	editor = nvim
[color]
	ui = auto
[diff]
	tool = difftastic
[difftool]
	prompt = false
[difftool "difftastic"]
	cmd = difft "$LOCAL" "$REMOTE"
[pager]
	difftool = true
[pull]
	ff = only
	rebase = true
[gpg]
	program = gpg
[commit]
	gpgsign = true
	verbose = true
[url "git@github.com:"]
	insteadOf = https://github.com/
[url "git@gist.github.com:"]
	insteadOf = https://gist.github.com/
{% if yadm.class == "work" %}
[includeIf "gitdir:~/projects/gametime/"]
  path = ~/projects/gametime/.gitconfig
{% endif %}
