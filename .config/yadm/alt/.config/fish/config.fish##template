# vi mode
fish_vi_key_bindings

# find completion dir
for d in (echo $XDG_DATA_DIRS | tr ':' '\n')
    if test -d {$d}/fish/completions
        set -Ux FPATH {$d}/fish/completions $FPATH
    end
end

# pyenv settings
set -Ux PYENV_ROOT $HOME/.pyenv
set -gx PATH $PYENV_ROOT/bin $PATH
set -gx PATH $PYENV_ROOT/shims $PATH

# rbenv settings
set -Ux RBENV_ROOT $HOME/.rbenv
set -gx PATH $RBENV_ROOT/bin $PATH

# user-local binaries
set -gx PATH $HOME/.bin $HOME/.local/bin $PATH

# for git commits
set -Ux EDITOR nvim

# for collecting all the custom executable paths
set -l custom_paths

# virtualenv settings
set -Ux WORKON_HOME $HOME/.virtualenvs
set -Ux PROJECT_HOME $HOME/projects
if test -d $HOME/.poetry
    set -a custom_paths $HOME/.poetry/bin
end

# ghostscript (for gimp)
if test -f /usr/bin/gs
    set -Ux GS_PROG /usr/bin/gs
end

# insert last arg from previous command
bind -M insert \e. history-token-search-backward

# cargo binaries (rust)
set -a custom_paths $HOME/.cargo/bin

# set go paths
set -Ux GOROOT
for dir in /usr/local/go /usr/lib/go /usr/local/lib/go
    test -e $dir && set GOROOT $dir
    set -a custom_paths $HOME/go/bin $GOROOT/bin
    break
end

# snap
test -e /snap/bin && set -a custom_paths /snap/bin

# xpath
if test -d /usr/local/opt/libxml2/bin
    set -a custom_paths /usr/local/opt/libxml2/bin
end

# android sdk
if test -d $PROJECT_HOME/android/platform-tools
    set -Ux ANDROID_SDK_ROOT $HOME/Android/Sdk
    set -Ux ANDROID_HOME $ANDROID_SDK_ROOT
    set -a custom_paths $ANDROID_SDK_ROOT/platform-tools
    set -a custom_paths $ANDROID_SDK_ROOT/cmdline-tools/bin
end

# asdf
set -Ux ASDF_ROOT "$HOME/.asdf"
set -a custom_paths $ASDF_ROOT/bin $ASDF_ROOT/shims

# pyenv
set -Ux PYENV_ROOT "$HOME/.pyenv"
set -a custom_paths $PYENV_ROOT/bin

# nodenv
set -Ux NODENV_ROOT "$HOME/.nodenv"
set -a custom_paths $NODENV_ROOT/bin $NODENV_ROOT/shims

# krew (kubectl plugin)
set -a custom_paths $HOME/.krew/bin

# homebrew
if test -d /opt/homebrew
    set -Ux HOMEBREW_PATH /opt/homebrew
    set custom_paths $HOMEBREW_PATH/bin $custom_paths
end

{% if yadm.os == "Linux" %}
# homebrew on linux
if test -d /home/linuxbrew/.linuxbrew
  set -gx HOMEBREW_PREFIX "/home/linuxbrew/.linuxbrew"
  set -gx HOMEBREW_CELLAR "/home/linuxbrew/.linuxbrew/Cellar"
  set -gx HOMEBREW_REPOSITORY "/home/linuxbrew/.linuxbrew/Homebrew"
  set -gx MANPATH "$HOMEBREW_PREFIX/share/man" $MANPATH
  set -gx INFOPATH "$HOMEBREW_PREFIX/share/info" $INFOPATH
  set -a custom_paths $HOMEBREW_PREFIX/bin $HOMEBREW_PREFIX/sbin
end
{% endif %}

{% if yadm.os == "Linux" %}
if test -d /opt/rocm/bin
    set -a custom_paths /opt/rocm/bin
end
if test -d /opt/rocm/opencl/bin
    set -a custom_paths /opt/rocm/opencl/bin
end
{% endif %}

# system-wide binaries
set -a custom_paths /usr/local/bin

# set PATH with all the custom paths
for path in $custom_paths
    contains $path $fish_user_paths; or set -a fish_user_paths $path
end

# aliases
alias d='docker'
alias dc='docker compose'
alias dx='docker exec -it'
alias db='docker buildx build'
alias g='git'
alias ga='git add'
alias gb='git branch'
alias gc='git ci'
alias gco='git co'
alias gd='git diff'
alias gr='git remote'
alias grb='git rebase'
alias k='kubectl'
{% if yadm.os == "WSL" %}
alias op='/mnt/c/Program\ Files/1Password\ CLI/op.exe'
alias open=wslview
{% endif %}
alias tf='terraform'
alias tg='terragrunt'
alias tgall='terragrunt --terragrunt-include-module-prefix run-all'
if type -q bat
    alias cat='bat'
end
if type -q batcat
    alias cat='batcat'
end
if type -q fdfind
    alias fd='fdfind'
end
if type -q prettyping
    alias ping='prettyping'
end
if type -q hub
    alias git='hub'
end
if test -x $HOME/.cargo/bin/exa
    alias ls='exa'
end
if test -x $HOME/.cargo/bin/btm
    alias top='btm'
end
if type -q nvim
    alias vim='nvim'
    alias v='nvim'
end

{% if yadm.os == "Darwin" %}
# set the GPG tty
set -gx GPG_TTY (tty)
{% endif %}

# source custom apps
status --is-interactive; and type -q pyenv; and pyenv init - | source
status --is-interactive; and type -q pyenv; and pyenv virtualenv-init - | source
status --is-interactive; and type -q rbenv; and rbenv init - fish | source
status --is-interactive; and type -q direnv; and direnv hook fish | source
type -q starship; and starship init fish | source
