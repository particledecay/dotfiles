---
- hosts: localhost
  connection: localhost
  gather_facts: yes
  vars:
    python_version: 3.7.6
    node_version: 15.14.0

  tasks:
    - name: PACKAGES
      block:
        - include_tasks: "{{ ansible_env.HOME }}/.config/yadm/packages.yml"

    - name: PACKAGE CONFIGURATION
      block:
        - name: Detect fish path
          shell: which fish
          register: fish_cmd
          changed_when: false

        - name: Set fish shell for user
          user:
            name: "{{ ansible_user_id }}"
            shell: "{{ fish_cmd.stdout }}"
          become: yes

        - name: Set pyenv installation path
          set_fact:
            pyenv_root: "{{ ansible_env.HOME }}/.pyenv"
            pyenv_bin: "{{ ansible_env.HOME }}/.pyenv/bin/pyenv"

        - name: Install pyenv for managing Python
          git:
            repo: https://github.com/pyenv/pyenv
            dest: "{{ pyenv_root }}"
            update: no

        - name: Create pyenv plugin directory
          file:
            path: "{{ pyenv_root }}/plugins"
            state: directory

        - name: Install pyenv virtualenv plugin
          git:
            repo: https://github.com/pyenv/pyenv-virtualenv
            dest: "{{ pyenv_root }}/plugins/pyenv-virtualenv"
            update: no

        - name: Install Python {{ python_version }}
          shell: 'eval "$(pyenv init -)" && pyenv install {{ python_version }}'
          args:
            executable: /bin/bash
            creates: "{{ pyenv_root }}/versions/{{ python_version }}"
          environment:
            PYENV_ROOT: "{{ pyenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ pyenv_root }}/bin"

        - name: Install Python packages
          pip:
            name: "{{ item }}"
            executable: "{{ pyenv_root }}/versions/{{ python_version }}/bin/pip"
          environment:
            PYENV_ROOT: "{{ pyenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ pyenv_root }}/bin"
          loop:
            - "ansible-lint"
            - "djlint"
            - "mypy"
            - "python-lsp-server[all]"
            - "vulture"

        - name: Set nodenv installation path
          set_fact:
            nodenv_root: "{{ ansible_env.HOME }}/.nodenv"
            nodenv_bin: "{{ ansible_env.HOME }}/.nodenv/bin/nodenv"

        - name: Install nodenv for managing Node
          git:
            repo: https://github.com/nodenv/nodenv
            dest: "{{ nodenv_root }}"
            update: no

        - name: Compile nodenv extension for performance
          shell: "{{ nodenv_root }}/src/configure && make -C {{ nodenv_root }}/src"
          args:
            executable: /bin/bash
            creates: "{{ nodenv_root }}/src/realpath.o"
          environment:
            NODENV_ROOT: "{{ nodenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ nodenv_root }}/bin"

        - name: Create nodenv plugin directory
          file:
            path: "{{ nodenv_root }}/plugins"
            state: directory

        - name: Install Node Build plugin
          git:
            repo: https://github.com/nodenv/node-build
            dest: "{{ nodenv_root }}/plugins/node-build"
            update: no

        - name: Install nodenv package rehash plugin
          git:
            repo: https://github.com/nodenv/nodenv-package-rehash
            dest: "{{ nodenv_root }}/plugins/nodenv-package-rehash"
            update: no
          register: nodenv_package_rehash

        - name: Install nodenv package hooks
          shell: 'eval "$(nodenv init -)" && nodenv package-hooks install --all'
          args:
            executable: /bin/bash
          environment:
            NODENV_ROOT: "{{ nodenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ nodenv_root }}/bin"
          when: nodenv_package_rehash is changed

        - name: Install Node {{ node_version }}
          shell: 'eval "$(nodenv init -)" && nodenv install {{ node_version }}'
          args:
            executable: /bin/bash
            creates: "{{ nodenv_root }}/versions/{{ node_version }}/bin/node"
          environment:
            NODENV_ROOT: "{{ nodenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ nodenv_root }}/bin:{{ nodenv_root }}/shims"

        - name: Set local Node version to {{ node_version }}
          shell: nodenv local {{ node_version }}
          args:
            executable: /bin/bash
          environment:
            NODENV_ROOT: "{{ nodenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ nodenv_root }}/bin:{{ nodenv_root }}/shims"
          changed_when: false

        - name: Install Node packages
          npm:
            name: "{{ item }}"
            global: yes
            executable: "{{ nodenv_root }}/versions/{{ node_version }}/bin/npm"
          environment:
            NODENV_ROOT: "{{ nodenv_root }}"
            PATH: "{{ ansible_env.PATH }}:{{ nodenv_root }}/bin:{{ nodenv_root }}/shims"
          loop:
            - "@fsouza/prettierd"
            - bash-language-server
            - diff-so-fancy
            - eslint_d
            - jsonlint
            - markdownlint
            - vscode-langservers-extracted
            - yaml-language-server

        - name: Set asdf installation path
          set_fact:
            asdf_root: "{{ ansible_env.HOME }}/.asdf"
            asdf_bin: "{{ ansible_env.HOME }}/.asdf/bin/asdf"

        - name: Install asdf
          git:
            repo: https://github.com/asdf-vm/asdf
            dest: "{{ asdf_root }}"
            update: no

        - name: Install asdf plugins
          include_tasks: "{{ ansible_env.HOME }}/.config/yadm/asdf.yml"
          loop:
            - 1password-cli
            - github-cli
            - helm
            - kconf
            - kind
            - kubectl
            - lab
            - packer
            - poetry
            - starship
            - talos
            - task
            - terraform
            - terraform-ls
            - vault

    - name: CUSTOMIZATION
      block:
        - name: Enable modular sudo files
          lineinfile:
            path: /etc/sudoers
            regexp: "^#includedir /etc/sudoers.d"
            line: "#includedir /etc/sudoers.d"
            state: present
            validate: "visudo -cf %s"
          become: yes

        - name: Create sudoers dir
          file:
            path: /etc/sudoers.d
            state: directory
          become: yes

        - name: Enable passwordless sudo
          lineinfile:
            path: /etc/sudoers.d/10-installer
            regexp: "^%wheel.*(NOPASSWD)?"
            line: "%wheel ALL=(ALL:ALL) NOPASSWD: ALL"
            state: present
            validate: "visudo -cf %s"
            create: yes
          become: yes

        - name: Install Neovim plugins
          shell: nvim +PackerInstall +qall
          args:
            executable: /bin/bash
            creates: "{{ ansible_env.HOME }}/.local/share/nvim/site/pack/packer/start/packer.nvim"

        - name: Create projects directory
          file:
            path: "{{ ansible_env.HOME }}/projects"
            state: directory

        - include_tasks: "{{ ansible_env.HOME }}/.config/yadm/gnome.yml"
          when:
            - ansible_distribution != "Darwin"
